<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
	<context:component-scan base-package="com.cci" />
	<!-- quartz start -->
	<!-- 要调用的工作类 -->
	<bean id="tmrQuartz" class="com.cci.oms.monitor.start.tmr.TmrMonitorQuartz"></bean>
	<bean id="wdsQuartz" class="com.cci.oms.monitor.start.wds.WdsMonitorQuartz"></bean>
	<!-- 定义tmr调用对象和调用对象的方法 -->
	<bean id="tmrJobtask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject"><ref bean="tmrQuartz"/></property>
		<!-- 调用类中的方法 -->
		<property name="targetMethod"><value>tmrStart</value></property>
	</bean>
	<!-- 定义wds调用对象和调用对象的方法 -->
	<bean id="wdsJobtask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 调用的类 -->
		<property name="targetObject"><ref bean="wdsQuartz"/></property>
		<!-- 调用类中的方法 -->
		<property name="targetMethod"><value>wdsStart</value></property>
	</bean>
	<!-- 定义tmr触发时间 -->
	<bean id="tmrdoTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail"><ref bean="tmrJobtask"/></property>
		<!-- cron表达式 -->
		<property name="cronExpression"><value>0/5 * * * * ?</value></property>
	</bean>
	<!-- 定义wds触发时间 -->
	<bean id="wdsdoTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail"><ref bean="wdsJobtask"/></property>
		<!-- cron表达式 -->
		<property name="cronExpression"><value>0/5 * * * * ?</value></property>
	</bean>
	<!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序  -->
	<bean id="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="tmrdoTime"/>
				<ref bean="wdsdoTime"/>
			</list>
		</property>
	</bean>
    <!--quartz end-->
	<!-- 配置spring线程池-->
	<bean id="taskExecutor"
		  class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />  <!--线程池至少有2个线程是启动的，即使是空闲的也不会关闭 -->
		<property name="maxPoolSize" value="50" /> <!--最大的线程数目，当corePoolSize繁忙时，会创建线程，启动的总的线程数不能大于maxPoolSize -->
		<property name="queueCapacity" value="20" /> <!-- 队列大小，当corePoolSize没有空闲线程的时候，允许queueCapacity个线程任务等待,queueCapacity队列满时!才会在corePoolSize的基础上,maxPoolSize之内进行新的线程的创建! -->
		<property name="keepAliveSeconds" value="2000" /> <!--单位毫秒，超过这个时间后会将大于corePoolSize的线程关闭 -->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$AbortPolicy" />
		</property>
	</bean>


	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:application-oracle.properties</value>
			</list>
		</property>
	</bean>

	<!-- dataSource 配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${oracle.driver}"/>
		<property name="url" value="${oracle.url}"/>
		<property name="username" value="${oracle.username}"/>
		<property name="password" value="${oracle.password}"/>

	</bean>

	<!-- 配置Jdbc模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource" />

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod"
		 expression="execution(* com.cci.*.**.service..*(..))"/>
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
</beans>
